# "Import" Python 2 modules in Python 3 using the CPython 2 interpreter

Python 2 and Python 3 are different languages, and we should treat
Python 2/3 interoperability the same way we treat interoperability
between completely different languages living on differents VMs.

Say Python 3 is our host language and we want use a Python 2 module.
When we "import" the Python 2 module, we start a Python 2 interpreter
(like CPython) and actually import the module for the Python 2
interpreter. Then for the Python 3 interpreter, we create a shim
definition for each definition in the Python 2 module that knows how
to serialize arguments and communicate with the Python 2 process. Then
when you use the "fake" module definitions in your Python 3 code, it
should be ... (TODO: fill in later).

# Notes
 - all of the current issues w/ python 2/3 interop come from seeing
   them as the same language, and then trying to force python 2 into
   the mold of python 3.
 - python 2 and python 3 are different languages. they should be
   treated as different languages.
 - racket talks to different languages by defining a module boundary.
 - can we define a boundary for python 2 projects, and say that python
   2 and python 3 projects *must* communicate over this boundary?
 - explicit goals: interop
 - how to pass functions, objects, etc?

# How?

- from Lindsey

Say you want to pass a language A function over to language B. How do
you turn it into a language B function? the answer: you put a wrapper
around it that:

 1. takes a language B argument,
 2. converts it to a language A argument,
 3. applies the language A function to the language A argument,
 4. gets a language A result,
 5. and turns the result back into a language B result.

If I wanted to pass objects between the libraries, the object would
live in the process it was created in, and the other process gets a
fake object that can communicate with the real one

